/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useEffect } from "react";
import { useGLTF } from "@react-three/drei";
import { useFrame, useThree } from "@react-three/fiber";
import OfficeScene from "../../assets/3d/mightbe.glb";
import { a } from "@react-spring/three";
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader.js';
import { KTX2Loader } from 'three/examples/jsm/loaders/KTX2Loader.js';

const Office3 = ({
  isRotating,
  setIsRotating,
  setCurrentStage,
  currentFocusPoint,
  ...props
}) => {
  const islandRef = useRef();
  // Get access to the Three.js renderer and viewport
  const { gl, viewport } = useThree();
  const { nodes, materials } = useGLTF(OfficeScene);

  // Use a ref for the last mouse x position
  const lastX = useRef(0);
  // Use a ref for rotation speed
  const rotationSpeed = useRef(0);
  // Define a damping factor to control rotation damping
  const dampingFactor = 0.95;

  // Handle pointer (mouse or touch) down event
  const handlePointerDown = (event) => {
    event.stopPropagation();
    event.preventDefault();
    setIsRotating(true);

    // Calculate the clientX based on whether it's a touch event or a mouse event
    const clientX = event.touches ? event.touches[0].clientX : event.clientX;

    // Store the current clientX position for reference
    lastX.current = clientX;
  };

  // Handle pointer (mouse or touch) up event
  const handlePointerUp = (event) => {
    event.stopPropagation();
    event.preventDefault();
    setIsRotating(false);
  };

  // Handle pointer (mouse or touch) move event
  const handlePointerMove = (event) => {
    event.stopPropagation();
    event.preventDefault();
    if (isRotating) {
      // If rotation is enabled, calculate the change in clientX position
      const clientX = event.touches ? event.touches[0].clientX : event.clientX;

      // calculate the change in the horizontal position of the mouse cursor or touch input,
      // relative to the viewport's width
      const delta = (clientX - lastX.current) / viewport.width;

      // Update the island's rotation based on the mouse/touch movement
      islandRef.current.rotation.y += delta * 0.01 * Math.PI;

      // Update the reference for the last clientX position
      lastX.current = clientX;

      // Update the rotation speed
      rotationSpeed.current = delta * 0.01 * Math.PI;
    }
  };

  // Handle keydown events
  const handleKeyDown = (event) => {
    if (event.key === "ArrowLeft") {
      if (!isRotating) setIsRotating(true);

      islandRef.current.rotation.y += 0.005 * Math.PI;
      rotationSpeed.current = 0.007;
    } else if (event.key === "ArrowRight") {
      if (!isRotating) setIsRotating(true);

      islandRef.current.rotation.y -= 0.005 * Math.PI;
      rotationSpeed.current = -0.007;
    }
  };

  // Handle keyup events
  const handleKeyUp = (event) => {
    if (event.key === "ArrowLeft" || event.key === "ArrowRight") {
      setIsRotating(false);
    }
  };

  // Touch events for mobile devices
  const handleTouchStart = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(true);

    const clientX = e.touches ? e.touches[0].clientX : e.clientX;
    lastX.current = clientX;
  };

  const handleTouchEnd = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setIsRotating(false);
  };

  const handleTouchMove = (e) => {
    e.stopPropagation();
    e.preventDefault();

    if (isRotating) {
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;
      const delta = (clientX - lastX.current) / viewport.width;

      islandRef.current.rotation.y += delta * 0.01 * Math.PI;
      lastX.current = clientX;
      rotationSpeed.current = delta * 0.01 * Math.PI;
    }
  };

  useEffect(() => {
    // Add event listeners for pointer and keyboard events
    const canvas = gl.domElement;
    canvas.addEventListener("pointerdown", handlePointerDown);
    canvas.addEventListener("pointerup", handlePointerUp);
    canvas.addEventListener("pointermove", handlePointerMove);
    window.addEventListener("keydown", handleKeyDown);
    window.addEventListener("keyup", handleKeyUp);
    canvas.addEventListener("touchstart", handleTouchStart);
    canvas.addEventListener("touchend", handleTouchEnd);
    canvas.addEventListener("touchmove", handleTouchMove);

    // Remove event listeners when component unmounts
    return () => {
      canvas.removeEventListener("pointerdown", handlePointerDown);
      canvas.removeEventListener("pointerup", handlePointerUp);
      canvas.removeEventListener("pointermove", handlePointerMove);
      window.removeEventListener("keydown", handleKeyDown);
      window.removeEventListener("keyup", handleKeyUp);
      canvas.removeEventListener("touchstart", handleTouchStart);
      canvas.removeEventListener("touchend", handleTouchEnd);
      canvas.removeEventListener("touchmove", handleTouchMove);
    };
  }, [gl, handlePointerDown, handlePointerUp, handlePointerMove]);

  // This function is called on each frame update
  useFrame(() => {
    // If not rotating, apply damping to slow down the rotation (smoothly)
    if (!isRotating) {
      // Apply damping factor
      rotationSpeed.current *= dampingFactor;

      // Stop rotation when speed is very small
      if (Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0;
      }

      islandRef.current.rotation.y += rotationSpeed.current;
    } else {
      // When rotating, determine the current stage based on island's orientation
      const rotation = islandRef.current.rotation.y;

      /**
       * Normalize the rotation value to ensure it stays within the range [0, 2 * Math.PI].
       * The goal is to ensure that the rotation value remains within a specific range to
       * prevent potential issues with very large or negative rotation values.
       *  Here's a step-by-step explanation of what this code does:
       *  1. rotation % (2 * Math.PI) calculates the remainder of the rotation value when divided
       *     by 2 * Math.PI. This essentially wraps the rotation value around once it reaches a
       *     full circle (360 degrees) so that it stays within the range of 0 to 2 * Math.PI.
       *  2. (rotation % (2 * Math.PI)) + 2 * Math.PI adds 2 * Math.PI to the result from step 1.
       *     This is done to ensure that the value remains positive and within the range of
       *     0 to 2 * Math.PI even if it was negative after the modulo operation in step 1.
       *  3. Finally, ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI) applies another
       *     modulo operation to the value obtained in step 2. This step guarantees that the value
       *     always stays within the range of 0 to 2 * Math.PI, which is equivalent to a full
       *     circle in radians.
       */
      const normalizedRotation =
        ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);

      // console.log(normalizedRotation);

      // Set the current stage based on the island's orientation
      switch (true) {
        case normalizedRotation >= 5.93 || normalizedRotation <= 0.35:
          setCurrentStage(3);
          break;

        // Stage 2: This range is straightforward (1.6 to 2.5)
        case normalizedRotation >= 1.6 && normalizedRotation <= 3:
          setCurrentStage(2);
          break;

        // Stage 1: This range is straightforward (4.25 to 4.75)
        case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
          setCurrentStage(1);
          break;

        // Stage 1: This range is straightforward (4.25 to 4.75)
        case normalizedRotation >= 3.2 && normalizedRotation <= 2.2:
          setCurrentStage(6);
          break;

        // Stage 4: This range wraps from 5.0 to 1.0 (ensure this doesn't run after 2)
        case normalizedRotation >= 5.0 && normalizedRotation <= 5.93:
          setCurrentStage(4);
          break;
        case normalizedRotation >= 0.36 && normalizedRotation <= 1.164:
          setCurrentStage(5);
          break;

        default:
          setCurrentStage(null);
      }
    }
  });

  return (
    <a.group {...props} ref={islandRef}>
      <group scale={0.01}>
        <group scale={100}>
          <group rotation={[-Math.PI / 2, 0, 0]} scale={0.008}>
            <group rotation={[Math.PI / 2, 0, 0]}>
              <mesh
                
                
                geometry={nodes.Archinteriors8_01_292_003_Esmalte_Preto_001_0001.geometry}
                material={materials.Esmalte_Preto_001}
                position={[-123.493, 1.133, 64.664]}
                rotation={[-Math.PI / 2, 0, -2.988]}
                scale={100}
              />
              <group
                position={[83.984, 227.115, 272.869]}
                rotation={[-Math.PI / 2, 0, -Math.PI]}
                scale={109.963}>
                <mesh
                  
                  
                  geometry={nodes.books_005_books_003_0001.geometry}
                  material={materials.books_003}
                />
                <mesh
                  
                  
                  geometry={nodes.books_005_books_paper_002_0001.geometry}
                  material={materials.books_paper_002}
                />
              </group>
              <group
                position={[108.26, 44.492, -116.527]}
                rotation={[-Math.PI / 2, 0, 0]}
                scale={[4.659, 3.09, 3.015]}>
                <mesh
                  
                  
                  geometry={nodes.Box323536_001_Cabinet_color_001_0001.geometry}
                  material={materials.Cabinet_color_001}
                />
                <mesh
                  
                  
                  geometry={nodes.Box323536_001_Cabinet_Handle_001_0001.geometry}
                  material={materials.Cabinet_Handle_001}
                />
              </group>
              <group
                position={[-39.701, 109.763, 134.386]}
                rotation={[-Math.PI / 2, 0, 0]}
                scale={7.178}>
                <mesh
                  
                  
                  geometry={nodes.Circle_001_PC1Material_008_0001.geometry}
                  material={materials.PC1Material_008}
                />
                <mesh
                  
                  
                  geometry={nodes.Circle_001_PC1Material_015_0001.geometry}
                  material={materials.PC1Material_015}
                />
                <mesh
                  
                  
                  geometry={nodes.Circle_001_PC1Material_016_0001.geometry}
                  material={materials.PC1Material_016}
                />
                <mesh
                  
                  
                  geometry={nodes.Circle_001_PC1PenBlackpart_001_0001.geometry}
                  material={materials.PC1PenBlackpart_001}
                />
              </group>
              <group
                position={[6.5, 109.763, -135.082]}
                rotation={[-Math.PI / 2, 0, 0]}
                scale={7.178}>
                <mesh
                  
                  
                  geometry={nodes.Circle_002_PC1Material_008_0001.geometry}
                  material={materials.PC1Material_008}
                />
                <mesh
                  
                  
                  geometry={nodes.Circle_002_PC1Material_015_0001.geometry}
                  material={materials.PC1Material_015}
                />
                <mesh
                  
                  
                  geometry={nodes.Circle_002_PC1PenBlackpart_001_0001.geometry}
                  material={materials.PC1PenBlackpart_001}
                />
              </group>
              <mesh
                
                
                geometry={nodes.Cube__0001.geometry}
                material={materials.Cube__0}
                rotation={[-Math.PI / 2, 0, 0]}
                scale={100}
              />
              <mesh
                
                
                geometry={nodes.low_poly_001_PC2_CUP_0001.geometry}
                material={materials.PC2_CUP}
                position={[-96.934, 104.672, -179.34]}
                rotation={[Math.PI, -1.218, Math.PI]}
                scale={104.361}
              />
              <mesh
                
                
                geometry={nodes.low_poly_013_Green1_0001.geometry}
                material={materials.Green1}
                position={[89.963, 21.688, 0]}
                rotation={[Math.PI / 2, 0, 0]}
                scale={100}
              />
              <mesh
                
                
                geometry={nodes.low_poly_014_Black5_0001.geometry}
                material={materials.PC1WireInGlas}
                position={[928.261, 144.487, -287.716]}
                rotation={[Math.PI / 2, 0, 0]}
                scale={100}
              />
              <mesh
                
                
                geometry={nodes.low_poly_018_PC2_CUP_0001.geometry}
                material={materials.PC2_CUP}
                position={[-96.934, 104.672, -9.247]}
                rotation={[Math.PI, -1.218, Math.PI]}
                scale={104.361}
              />
              <mesh
                
                
                geometry={nodes.low_poly_025_Blue3_0001.geometry}
                material={materials.Blue3}
                position={[89.963, 21.688, 0]}
                rotation={[Math.PI / 2, 0, 0]}
                scale={100}
              />
              <mesh
                
                
                geometry={nodes.Mirror_Chrome_001_0001.geometry}
                material={materials.Chrome_001}
                position={[114.094, 229.585, 423.474]}
                rotation={[0, 1.571, 0]}
                scale={[88.69, 71.932, 71.932]}
              />
              <group
                position={[-53.651, 132.925, 46.362]}
                rotation={[-Math.PI, 0.004, -Math.PI]}
                scale={4.887}>
                <mesh
                  
                  
                  geometry={nodes.Monitor_27__Curved_002_PC_1Back_Panel_0001.geometry}
                  material={materials.PC_1Back_Panel}
                />
                <mesh
                  
                  
                  geometry={nodes.Monitor_27__Curved_002_PC_1Stand_0001.geometry}
                  material={materials.PC_1Stand}
                />
                <mesh
                  
                  
                  geometry={nodes.Monitor_27__Curved_002_PC_1Wallpaper_0001.geometry}
                  material={materials.PC_1Wallpaper}
                />
              </group>
              <mesh
                
                
                geometry={nodes.Monitor_27__Curved_003_PC_1_Keyboard_0001.geometry}
                material={materials.PC_1_Keyboard}
                position={[-100.191, 98.17, 38.896]}
                rotation={[-Math.PI, 0.004, -Math.PI]}
                scale={4.887}
              />
              <mesh
                
                
                geometry={nodes.Monitor_27__Curved_004_PC1MOUSE_0001.geometry}
                material={materials.PC1MOUSE}
                position={[-98.322, 98.079, 66.16]}
                rotation={[-Math.PI, 0.004, -Math.PI]}
                scale={4.887}
              />
              <mesh
                
                
                geometry={nodes.Plane_Material_003_0001.geometry}
                material={materials.Material_003}
                position={[1.104, 94.98, -60.764]}
                rotation={[-Math.PI / 2, 0, 0]}
                scale={[129.712, 201.896, 100]}
              />
              <mesh
                
                
                geometry={nodes.Plane_002_White_0001.geometry}
                material={materials.White}
                rotation={[Math.PI, 0, 0]}
                scale={[264.514, 195.858, 100]}
              />
              <group
                position={[87.241, 97.398, 7.543]}
                rotation={[-Math.PI / 2, 0, 1.834]}
                scale={1.237}>
                <mesh
                  
                  
                  geometry={nodes.R_Mouse_00_001_PC2_BODY_0001.geometry}
                  material={materials.PC2_BODY}
                />
                <mesh
                  
                  
                  geometry={nodes.R_Mouse_00_001_PC2_SCREEN_0001.geometry}
                  material={materials.PC2_SCREEN}
                />
              </group>
              <mesh
                
                
                geometry={nodes.R_Mouse_00_002_PC2_MOUSEPAD_0001.geometry}
                material={materials.PC2_MOUSEPAD}
                position={[92.88, 98.081, 42.961]}
                rotation={[-Math.PI / 2, 0, 1.834]}
                scale={1.237}
              />
              <mesh
                
                
                geometry={nodes.R_Mouse_00_003_PC2_KEYBOARD_0001.geometry}
                material={materials.PC2_KEYBOARD}
                position={[94.34, 98.17, 59.888]}
                rotation={[-Math.PI / 2, 0, 1.834]}
                scale={1.237}
              />
              <mesh
                
                
                geometry={nodes.R_Mouse_00_004_PC2_MOUSE_0001.geometry}
                material={materials.PC2_MOUSE}
                position={[92.88, 98.081, 42.961]}
                rotation={[-Math.PI / 2, 0, 1.834]}
                scale={1.237}
              />
              <group position={[165.531, 135.211, 385.731]} rotation={[0, 1.571, 0]} scale={43.618}>
                <mesh
                  
                  
                  geometry={nodes.Rectangle013_001_Marble_0001.geometry}
                  material={materials.Marble}
                />
                <mesh
                  
                  
                  geometry={nodes.Rectangle013_001_Material_020_0001.geometry}
                  material={materials.Material_020}
                />
              </group>
              <group position={[56.094, 110.061, -259.265]} rotation={[0, 1.571, 0]} scale={1.702}>
                <mesh
                  
                  
                  geometry={nodes.surface_SURFACE_2_KEYBOARD_0001.geometry}
                  material={materials.SURFACE_2_KEYBOARD}
                />
                <mesh
                  
                  
                  geometry={nodes.surface_SURFACE_2_SCREEN_0001.geometry}
                  material={materials.SURFACE_2_SCREEN}
                />
              </group>
              <group position={[56.094, 110.061, -259.265]} rotation={[0, 1.571, 0]} scale={1.702}>
                <mesh
                  
                  
                  geometry={nodes.surface_001_SURFACE_1_KEYBOARD_0001.geometry}
                  material={materials.PC1WireInGlas}
                />
                <mesh
                  
                  
                  geometry={nodes.surface_001_SURFACE_1_SCREEN_0001.geometry}
                  material={materials.SURFACE_1_SCREEN}
                />
              </group>
              <group
                position={[-91.47, 95.896, -232.847]}
                rotation={[-1.596, 0.245, -1.468]}
                scale={41.664}>
                <mesh
                  
                  
                  geometry={nodes.tela_LAP_1_BLACK_FRAME_0001.geometry}
                  material={materials.LAP_1_BLACK_FRAME}
                />
                <mesh
                  
                  
                  geometry={nodes.tela_LAP_1_BODY_0001.geometry}
                  material={materials.LAP_1_BODY}
                />
                <mesh
                  
                  
                  geometry={nodes.tela_LAP_1_KEYBOARD_0001.geometry}
                  material={materials.LAP_1_KEYBOARD}
                />
                <mesh
                  
                  
                  geometry={nodes.tela_LAP_1SCREEN_0001.geometry}
                  material={materials.LAP_1SCREEN}
                />
              </group>
            </group>
          </group>
        </group>
      </group>
    </a.group>

  );
};

export default Office3;
